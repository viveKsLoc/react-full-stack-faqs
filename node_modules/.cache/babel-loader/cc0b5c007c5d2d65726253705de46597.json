{"ast":null,"code":"import cnb from 'cnbuilder';\nimport { oneOf, func, bool, number, string, object } from 'prop-types';\nimport { createElement, Component, createContext } from 'react';\nimport { zoomLevel } from 'zoom-level';\nimport { DraggableCore } from 'react-draggable';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar doc = (typeof document === \"undefined\" ? \"undefined\" : _typeof(document)) === \"object\" ? document : null;\n\nvar isUndef = function isUndef(v) {\n  return typeof v === \"undefined\";\n};\n\nvar isFun = function isFun(v) {\n  return typeof v === \"function\";\n};\n\nvar isNum = function isNum(v) {\n  return typeof v === \"number\";\n};\n/**\r\n * @description Will return renderer result if presented, div element otherwise.\r\n * If renderer is presented it'll receive `elementRef` function which should be used as HTMLElement's ref.\r\n *\r\n * @param props {ElementPropsWithElementRefAndRenderer}\r\n * @param elementRef {ElementRef}\r\n */\n\n\nvar renderDivWithRenderer = function renderDivWithRenderer(props, elementRef) {\n  if (isFun(props.renderer)) {\n    props.elementRef = elementRef;\n    var renderer = props.renderer;\n    delete props.renderer;\n    return renderer(props);\n  }\n\n  delete props.elementRef;\n  return createElement(\"div\", _assign({}, props, {\n    ref: elementRef\n  }));\n};\n\nvar getInnerSize = function getInnerSize(el, dimension, padding1, padding2) {\n  var styles = getComputedStyle(el);\n\n  if (styles.boxSizing === \"border-box\") {\n    return Math.max(0, (parseFloat(styles[dimension]) || 0) - (parseFloat(styles[padding1]) || 0) - (parseFloat(styles[padding2]) || 0));\n  }\n\n  return parseFloat(styles[dimension]) || 0;\n};\n/**\r\n * @description Return element's height without padding\r\n */\n\n\nvar getInnerHeight = function getInnerHeight(el) {\n  return getInnerSize(el, \"height\", \"paddingTop\", \"paddingBottom\");\n};\n/**\r\n * @description Return element's width without padding\r\n */\n\n\nvar getInnerWidth = function getInnerWidth(el) {\n  return getInnerSize(el, \"width\", \"paddingLeft\", \"paddingRight\");\n};\n/**\r\n * @description Return unique UUID v4\r\n */\n\n\nvar uuid = function uuid() {\n  var uuid = \"\";\n\n  for (var i = 0; i < 32; i++) {\n    if (i === 8 || i === 20) {\n      uuid += \"-\" + (Math.random() * 16 | 0).toString(16);\n    } else if (i === 12) {\n      uuid += \"-4\";\n    } else if (i === 16) {\n      uuid += \"-\" + (Math.random() * 16 | 0 & 3 | 8).toString(16);\n    } else {\n      uuid += (Math.random() * 16 | 0).toString(16);\n    }\n  }\n\n  return uuid;\n};\n/**\r\n * @description Calculate thumb size for given viewport and track parameters\r\n *\r\n * @param {number} contentSize - Scrollable content size\r\n * @param {number} viewportSize - Viewport size\r\n * @param {number} trackSize - Track size thumb can move\r\n * @param {number} minimalSize - Minimal thumb's size\r\n * @param {number} maximalSize - Maximal thumb's size\r\n */\n\n\nvar calcThumbSize = function calcThumbSize(contentSize, viewportSize, trackSize, minimalSize, maximalSize) {\n  if (viewportSize >= contentSize) {\n    return 0;\n  }\n\n  var thumbSize = viewportSize / contentSize * trackSize;\n  isNum(maximalSize) && (thumbSize = Math.min(maximalSize, thumbSize));\n  isNum(minimalSize) && (thumbSize = Math.max(minimalSize, thumbSize));\n  return thumbSize;\n};\n/**\r\n * @description Calculate thumb offset for given viewport, track and thumb parameters\r\n *\r\n * @param {number} contentSize - Scrollable content size\r\n * @param {number} viewportSize - Viewport size\r\n * @param {number} trackSize - Track size thumb can move\r\n * @param {number} thumbSize - Thumb size\r\n * @param {number} scroll - Scroll value to represent\r\n */\n\n\nvar calcThumbOffset = function calcThumbOffset(contentSize, viewportSize, trackSize, thumbSize, scroll) {\n  if (!scroll || !thumbSize || viewportSize >= contentSize) {\n    return 0;\n  }\n\n  return (trackSize - thumbSize) * scroll / (contentSize - viewportSize);\n};\n/**\r\n * @description Calculate scroll for given viewport, track and thumb parameters\r\n *\r\n * @param {number} contentSize - Scrollable content size\r\n * @param {number} viewportSize - Viewport size\r\n * @param {number} trackSize - Track size thumb can move\r\n * @param {number} thumbSize - Thumb size\r\n * @param {number} thumbOffset - Thumb's offset representing the scroll\r\n */\n\n\nvar calcScrollForThumbOffset = function calcScrollForThumbOffset(contentSize, viewportSize, trackSize, thumbSize, thumbOffset) {\n  if (!thumbOffset || !thumbSize || viewportSize >= contentSize) {\n    return 0;\n  }\n\n  return thumbOffset * (contentSize - viewportSize) / (trackSize - thumbSize);\n};\n/**\r\n * @description Returns scrollbar width specific for current environment\r\n */\n\n\nvar getScrollbarWidth = function getScrollbarWidth(force) {\n  if (force === void 0) {\n    force = false;\n  }\n\n  if (!doc) {\n    return getScrollbarWidth._cache = 0;\n  }\n\n  if (!force && !isUndef(getScrollbarWidth._cache)) {\n    return getScrollbarWidth._cache;\n  }\n\n  var el = doc.createElement(\"div\");\n  el.setAttribute(\"style\", \"position:absolute;width:100px;height:100px;top:-999px;left:-999px;overflow:scroll;\");\n  doc.body.appendChild(el);\n  getScrollbarWidth._cache = 100 - el.clientWidth;\n  doc.body.removeChild(el);\n  return getScrollbarWidth._cache;\n};\n/**\r\n * @description Detect need of horizontal scroll reverse while RTL\r\n */\n\n\nvar shouldReverseRtlScroll = function shouldReverseRtlScroll(force) {\n  if (force === void 0) {\n    force = false;\n  }\n\n  if (!force && !isUndef(shouldReverseRtlScroll._cache)) {\n    return shouldReverseRtlScroll._cache;\n  }\n\n  if (!doc) {\n    return shouldReverseRtlScroll._cache = false;\n  }\n\n  var el = doc.createElement(\"div\");\n  var child = doc.createElement(\"div\");\n  el.appendChild(child);\n  el.setAttribute(\"style\", \"position:absolute;width:100px;height:100px;top:-999px;left:-999px;overflow:scroll;direction:rtl\");\n  child.setAttribute(\"style\", \"width:1000px;height:1000px\");\n  doc.body.appendChild(el);\n  el.scrollLeft = -50;\n  shouldReverseRtlScroll._cache = el.scrollLeft === -50;\n  doc.body.removeChild(el);\n  return shouldReverseRtlScroll._cache;\n};\n\nvar Emittr =\n/** @class */\nfunction () {\n  function Emittr(maxHandlers) {\n    if (maxHandlers === void 0) {\n      maxHandlers = 10;\n    }\n\n    this.setMaxHandlers(maxHandlers);\n    this._handlers = Object.create(null);\n  }\n\n  Emittr._callEventHandlers = function (emitter, handlers, args) {\n    if (!handlers.length) {\n      return;\n    }\n\n    if (handlers.length === 1) {\n      Reflect.apply(handlers[0], emitter, args);\n      return;\n    }\n\n    handlers = __spreadArrays(handlers);\n    var idx;\n\n    for (idx = 0; idx < handlers.length; idx++) {\n      Reflect.apply(handlers[idx], emitter, args);\n    }\n  };\n\n  Emittr.prototype.setMaxHandlers = function (count) {\n    if (!isNum(count) || count <= 0) {\n      throw new TypeError(\"Expected maxHandlers to be a positive number, got '\" + count + \"' of type \" + _typeof(count));\n    }\n\n    this._maxHandlers = count;\n    return this;\n  };\n\n  Emittr.prototype.getMaxHandlers = function () {\n    return this._maxHandlers;\n  };\n\n  Emittr.prototype.emit = function (name) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    if (_typeof(this._handlers[name]) !== \"object\" || !Array.isArray(this._handlers[name])) {\n      return false;\n    }\n\n    Emittr._callEventHandlers(this, this._handlers[name], args);\n\n    return true;\n  };\n\n  Emittr.prototype.on = function (name, handler) {\n    Emittr._addHandler(this, name, handler);\n\n    return this;\n  };\n\n  Emittr.prototype.prependOn = function (name, handler) {\n    Emittr._addHandler(this, name, handler, true);\n\n    return this;\n  };\n\n  Emittr.prototype.once = function (name, handler) {\n    if (!isFun(handler)) {\n      throw new TypeError(\"Expected event handler to be a function, got \" + _typeof(handler));\n    }\n\n    Emittr._addHandler(this, name, this._wrapOnceHandler(name, handler));\n\n    return this;\n  };\n\n  Emittr.prototype.prependOnce = function (name, handler) {\n    if (!isFun(handler)) {\n      throw new TypeError(\"Expected event handler to be a function, got \" + _typeof(handler));\n    }\n\n    Emittr._addHandler(this, name, this._wrapOnceHandler(name, handler), true);\n\n    return this;\n  };\n\n  Emittr.prototype.off = function (name, handler) {\n    Emittr._removeHandler(this, name, handler);\n\n    return this;\n  };\n\n  Emittr.prototype.removeAllHandlers = function () {\n    var handlers = this._handlers;\n    this._handlers = Object.create(null);\n    var removeHandlers = handlers[\"removeHandler\"];\n    delete handlers[\"removeHandler\"];\n    var idx, eventName;\n\n    for (eventName in handlers) {\n      for (idx = handlers[eventName].length - 1; idx >= 0; idx--) {\n        Emittr._callEventHandlers(this, removeHandlers, [eventName, handlers[eventName][idx].handler || handlers[eventName][idx]]);\n      }\n    }\n\n    return this;\n  };\n\n  Emittr.prototype._wrapOnceHandler = function (name, handler) {\n    var onceState = {\n      fired: false,\n      handler: handler,\n      wrappedHandler: undefined,\n      emitter: this,\n      event: name\n    };\n\n    var wrappedHandler = Emittr._onceWrapper.bind(onceState);\n\n    onceState.wrappedHandler = wrappedHandler;\n    wrappedHandler.handler = handler;\n    wrappedHandler.event = name;\n    return wrappedHandler;\n  };\n\n  Emittr._addHandler = function (emitter, name, handler, prepend) {\n    if (prepend === void 0) {\n      prepend = false;\n    }\n\n    if (!isFun(handler)) {\n      throw new TypeError(\"Expected event handler to be a function, got \" + _typeof(handler));\n    }\n\n    emitter._handlers[name] = emitter._handlers[name] || [];\n    emitter.emit(\"addHandler\", name, handler);\n    prepend ? emitter._handlers[name].unshift(handler) : emitter._handlers[name].push(handler);\n    return emitter;\n  };\n\n  Emittr._onceWrapper = function _onceWrapper() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.fired) {\n      this.fired = true;\n      this.emitter.off(this.event, this.wrappedHandler);\n      Reflect.apply(this.handler, this.emitter, args);\n    }\n  };\n\n  Emittr._removeHandler = function (emitter, name, handler) {\n    if (!isFun(handler)) {\n      throw new TypeError(\"Expected event handler to be a function, got \" + _typeof(handler));\n    }\n\n    if (isUndef(emitter._handlers[name]) || !emitter._handlers[name].length) {\n      return emitter;\n    }\n\n    var idx = -1;\n\n    if (emitter._handlers[name].length === 1) {\n      if (emitter._handlers[name][0] === handler || emitter._handlers[name][0].handler === handler) {\n        idx = 0;\n        handler = emitter._handlers[name][0].handler || emitter._handlers[name][0];\n      }\n    } else {\n      for (idx = emitter._handlers[name].length - 1; idx >= 0; idx--) {\n        if (emitter._handlers[name][idx] === handler || emitter._handlers[name][idx].handler === handler) {\n          handler = emitter._handlers[name][idx].handler || emitter._handlers[name][idx];\n          break;\n        }\n      }\n    }\n\n    if (idx === -1) {\n      return emitter;\n    }\n\n    idx === 0 ? emitter._handlers[name].shift() : emitter._handlers[name].splice(idx, 1);\n    emitter.emit(\"removeHandler\", name, handler);\n    return emitter;\n  };\n\n  return Emittr;\n}();\n\nvar RAFLoop =\n/** @class */\nfunction () {\n  function RAFLoop() {\n    var _this = this;\n    /**\r\n     * @description List of targets to update\r\n     */\n\n\n    this.targets = [];\n    /**\r\n     * @description ID of requested animation frame. Valuable only if loop is active and has items to iterate.\r\n     */\n\n    this.animationFrameID = 0;\n    /**\r\n     * @description Loop's state.\r\n     */\n\n    this._isActive = false;\n    /**\r\n     * @description Start the loop if it wasn't yet.\r\n     */\n\n    this.start = function () {\n      if (!_this._isActive && _this.targets.length) {\n        _this._isActive = true;\n        _this.animationFrameID && cancelAnimationFrame(_this.animationFrameID);\n        _this.animationFrameID = requestAnimationFrame(_this.rafCallback);\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Stop the loop if is was active.\r\n     */\n\n\n    this.stop = function () {\n      if (_this._isActive) {\n        _this._isActive = false;\n        _this.animationFrameID && cancelAnimationFrame(_this.animationFrameID);\n        _this.animationFrameID = 0;\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Add target to the iteration list if it's not there.\r\n     */\n\n\n    this.addTarget = function (target, silent) {\n      if (silent === void 0) {\n        silent = false;\n      }\n\n      if (_this.targets.indexOf(target) === -1) {\n        _this.targets.push(target);\n\n        _this.targets.length === 1 && !silent && _this.start();\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Remove target from iteration list if it was there.\r\n     */\n\n\n    this.removeTarget = function (target) {\n      var idx = _this.targets.indexOf(target);\n\n      if (idx !== -1) {\n        _this.targets.splice(idx, 1);\n\n        _this.targets.length === 0 && _this.stop();\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Callback that called each animation frame.\r\n     */\n\n\n    this.rafCallback = function () {\n      if (!_this._isActive) {\n        return 0;\n      }\n\n      for (var i = 0; i < _this.targets.length; i++) {\n        !_this.targets[i]._unmounted && _this.targets[i].update();\n      }\n\n      return _this.animationFrameID = requestAnimationFrame(_this.rafCallback);\n    };\n  }\n\n  Object.defineProperty(RAFLoop.prototype, \"isActive\", {\n    /**\r\n     * @description Loop's state.\r\n     */\n    get: function get() {\n      return this._isActive;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RAFLoop;\n}();\n\nvar Loop = new RAFLoop();\nvar AXIS_DIRECTION;\n\n(function (AXIS_DIRECTION) {\n  AXIS_DIRECTION[\"X\"] = \"x\";\n  AXIS_DIRECTION[\"Y\"] = \"y\";\n})(AXIS_DIRECTION || (AXIS_DIRECTION = {}));\n\nvar AXIS_DIRECTION_PROP_TYPE = oneOf([AXIS_DIRECTION.X, AXIS_DIRECTION.Y]);\nvar TRACK_CLICK_BEHAVIOR;\n\n(function (TRACK_CLICK_BEHAVIOR) {\n  TRACK_CLICK_BEHAVIOR[\"JUMP\"] = \"jump\";\n  TRACK_CLICK_BEHAVIOR[\"STEP\"] = \"step\";\n})(TRACK_CLICK_BEHAVIOR || (TRACK_CLICK_BEHAVIOR = {}));\n\nvar TRACK_CLICK_BEHAVIOR_PROP_TYPE = oneOf([TRACK_CLICK_BEHAVIOR.JUMP, TRACK_CLICK_BEHAVIOR.STEP]);\n\nvar ScrollbarThumb =\n/** @class */\nfunction (_super) {\n  __extends(ScrollbarThumb, _super);\n\n  function ScrollbarThumb() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.initialOffsetX = 0;\n    _this.initialOffsetY = 0;\n    _this.lastDragData = {\n      x: 0,\n      y: 0,\n      deltaX: 0,\n      deltaY: 0,\n      lastX: 0,\n      lastY: 0\n    };\n    _this.element = null;\n\n    _this.handleOnDragStart = function (ev, data) {\n      if (!_this.element) {\n        _this.handleOnDragStop(ev, data);\n\n        return;\n      }\n\n      if (global.document) {\n        _this.prevUserSelect = global.document.body.style.userSelect;\n        global.document.body.style.userSelect = \"none\";\n        _this.prevOnSelectStart = global.document.onselectstart;\n        global.document.onselectstart = ScrollbarThumb.selectStartReplacer;\n      }\n\n      _this.props.onDragStart && _this.props.onDragStart(_this.lastDragData = {\n        x: data.x - _this.initialOffsetX,\n        y: data.y - _this.initialOffsetY,\n        lastX: data.lastX - _this.initialOffsetX,\n        lastY: data.lastY - _this.initialOffsetY,\n        deltaX: data.deltaX,\n        deltaY: data.deltaY\n      });\n\n      _this.element.classList.add(\"dragging\");\n    };\n\n    _this.handleOnDrag = function (ev, data) {\n      if (!_this.element) {\n        _this.handleOnDragStop(ev, data);\n\n        return;\n      }\n\n      _this.props.onDrag && _this.props.onDrag(_this.lastDragData = {\n        x: data.x - _this.initialOffsetX,\n        y: data.y - _this.initialOffsetY,\n        lastX: data.lastX - _this.initialOffsetX,\n        lastY: data.lastY - _this.initialOffsetY,\n        deltaX: data.deltaX,\n        deltaY: data.deltaY\n      });\n    };\n\n    _this.handleOnDragStop = function (ev, data) {\n      var resultData = data ? {\n        x: data.x - _this.initialOffsetX,\n        y: data.y - _this.initialOffsetY,\n        lastX: data.lastX - _this.initialOffsetX,\n        lastY: data.lastY - _this.initialOffsetY,\n        deltaX: data.deltaX,\n        deltaY: data.deltaY\n      } : _this.lastDragData;\n      _this.props.onDragEnd && _this.props.onDragEnd(resultData);\n      _this.element && _this.element.classList.remove(\"dragging\");\n\n      if (global.document) {\n        global.document.body.style.userSelect = _this.prevUserSelect;\n        global.document.onselectstart = _this.prevOnSelectStart;\n        _this.prevOnSelectStart = null;\n      }\n\n      _this.initialOffsetX = 0;\n      _this.initialOffsetY = 0;\n      _this.lastDragData = {\n        x: 0,\n        y: 0,\n        deltaX: 0,\n        deltaY: 0,\n        lastX: 0,\n        lastY: 0\n      };\n    };\n\n    _this.handleOnMouseDown = function (ev) {\n      if (!_this.element) {\n        return;\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      if (!isUndef(ev.offsetX)) {\n        _this.initialOffsetX = ev.offsetX;\n        _this.initialOffsetY = ev.offsetY;\n      } else {\n        var rect = _this.element.getBoundingClientRect();\n\n        _this.initialOffsetX = ev.clientX - rect.left;\n        _this.initialOffsetY = ev.clientY - rect.top;\n      }\n    };\n\n    _this.elementRef = function (ref) {\n      isFun(_this.props.elementRef) && _this.props.elementRef(ref);\n      _this.element = ref;\n    };\n\n    return _this;\n  }\n\n  ScrollbarThumb.prototype.componentDidMount = function () {\n    if (!this.element) {\n      this.setState(function () {\n        throw new Error(\"Element was not created. Possibly you haven't provided HTMLDivElement to renderer's `elementRef` function.\");\n      });\n      return;\n    }\n  };\n\n  ScrollbarThumb.prototype.componentWillUnmount = function () {\n    this.handleOnDragStop();\n    this.elementRef(null);\n  };\n\n  ScrollbarThumb.prototype.render = function () {\n    var _a = this.props,\n        elementRef = _a.elementRef,\n        axis = _a.axis,\n        onDrag = _a.onDrag,\n        onDragEnd = _a.onDragEnd,\n        onDragStart = _a.onDragStart,\n        props = __rest(_a, [\"elementRef\", \"axis\", \"onDrag\", \"onDragEnd\", \"onDragStart\"]);\n\n    props.className = cnb(\"ScrollbarsCustom-Thumb\", axis === AXIS_DIRECTION.X ? \"ScrollbarsCustom-ThumbX\" : \"ScrollbarsCustom-ThumbY\", props.className);\n\n    if (props.renderer) {\n      props.axis = axis;\n    }\n\n    return createElement(DraggableCore, {\n      allowAnyClick: false,\n      enableUserSelectHack: false,\n      onMouseDown: this.handleOnMouseDown,\n      onDrag: this.handleOnDrag,\n      onStart: this.handleOnDragStart,\n      onStop: this.handleOnDragStop,\n      children: renderDivWithRenderer(props, this.elementRef)\n    });\n  };\n\n  ScrollbarThumb.propTypes = {\n    axis: AXIS_DIRECTION_PROP_TYPE,\n    onDrag: func,\n    onDragStart: func,\n    onDragEnd: func,\n    elementRef: func,\n    renderer: func\n  };\n\n  ScrollbarThumb.selectStartReplacer = function () {\n    return false;\n  };\n\n  return ScrollbarThumb;\n}(Component);\n\nvar ScrollbarTrack =\n/** @class */\nfunction (_super) {\n  __extends(ScrollbarTrack, _super);\n\n  function ScrollbarTrack() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = null;\n\n    _this.elementRef = function (ref) {\n      isFun(_this.props.elementRef) && _this.props.elementRef(ref);\n      _this.element = ref;\n    };\n\n    _this.handleClick = function (ev) {\n      if (!ev || !_this.element || ev.button !== 0) {\n        return;\n      }\n\n      if (isFun(_this.props.onClick) && ev.target === _this.element) {\n        if (!isUndef(ev.offsetX)) {\n          _this.props.onClick(ev, {\n            axis: _this.props.axis,\n            offset: _this.props.axis === AXIS_DIRECTION.X ? ev.offsetX : ev.offsetY\n          });\n        } else {\n          // support for old browsers\n          var rect = _this.element.getBoundingClientRect();\n\n          _this.props.onClick(ev, {\n            axis: _this.props.axis,\n            offset: _this.props.axis === AXIS_DIRECTION.X ? ev.clientX - rect.left : ev.clientY - rect.top\n          });\n        }\n      }\n\n      return true;\n    };\n\n    return _this;\n  }\n\n  ScrollbarTrack.prototype.componentDidMount = function () {\n    if (!this.element) {\n      this.setState(function () {\n        throw new Error(\"Element was not created. Possibly you haven't provided HTMLDivElement to renderer's `elementRef` function.\");\n      });\n      return;\n    }\n\n    this.element.addEventListener(\"click\", this.handleClick);\n  };\n\n  ScrollbarTrack.prototype.componentWillUnmount = function () {\n    if (this.element) {\n      this.element.removeEventListener(\"click\", this.handleClick);\n      this.element = null;\n      this.elementRef(null);\n    }\n  };\n\n  ScrollbarTrack.prototype.render = function () {\n    var _a = this.props,\n        elementRef = _a.elementRef,\n        axis = _a.axis,\n        onClick = _a.onClick,\n        props = __rest(_a, [\"elementRef\", \"axis\", \"onClick\"]);\n\n    props.className = cnb(\"ScrollbarsCustom-Track\", axis === AXIS_DIRECTION.X ? \"ScrollbarsCustom-TrackX\" : \"ScrollbarsCustom-TrackY\", props.className);\n\n    if (props.renderer) {\n      props.axis = axis;\n    }\n\n    return renderDivWithRenderer(props, this.elementRef);\n  };\n\n  ScrollbarTrack.propTypes = {\n    axis: AXIS_DIRECTION_PROP_TYPE,\n    onClick: func,\n    elementRef: func,\n    renderer: func\n  };\n  return ScrollbarTrack;\n}(Component);\n\nvar style = {\n  holder: {\n    position: \"relative\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  wrapper: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  },\n  content: {\n    boxSizing: \"border-box\"\n  },\n  track: {\n    common: {\n      position: \"absolute\",\n      overflow: \"hidden\",\n      borderRadius: 4,\n      background: \"rgba(0,0,0,.1)\",\n      userSelect: \"none\"\n    },\n    x: {\n      height: 10,\n      width: \"calc(100% - 20px)\",\n      bottom: 0,\n      left: 10\n    },\n    y: {\n      width: 10,\n      height: \"calc(100% - 20px)\",\n      top: 10\n    }\n  },\n  thumb: {\n    common: {\n      cursor: \"pointer\",\n      borderRadius: 4,\n      background: \"rgba(0,0,0,.4)\"\n    },\n    x: {\n      height: \"100%\",\n      width: 0\n    },\n    y: {\n      width: \"100%\",\n      height: 0\n    }\n  }\n};\nvar pageZoomLevel = global.window ? zoomLevel() : 1;\nglobal.window && global.window.addEventListener(\"resize\", function () {\n  return pageZoomLevel = zoomLevel();\n}, {\n  passive: true\n});\nvar ScrollbarContext = createContext({\n  parentScrollbar: null\n});\n\nvar Scrollbar =\n/** @class */\nfunction (_super) {\n  __extends(Scrollbar, _super);\n\n  function Scrollbar(props) {\n    var _this = _super.call(this, props) || this;\n    /**\r\n     * @description Get current scroll-related values.<br/>\r\n     * If <i>force</i> if truthy - will recalculate them instead of returning cached values.\r\n     *\r\n     * @return ScrollState\r\n     */\n\n\n    _this.getScrollState = function (force) {\n      if (force === void 0) {\n        force = false;\n      }\n\n      if (_this.scrollValues && !force) {\n        return _assign({}, _this.scrollValues);\n      }\n\n      var scrollState = {\n        clientHeight: 0,\n        clientWidth: 0,\n        contentScrollHeight: 0,\n        contentScrollWidth: 0,\n        scrollHeight: 0,\n        scrollWidth: 0,\n        scrollTop: 0,\n        scrollLeft: 0,\n        scrollYBlocked: false,\n        scrollXBlocked: false,\n        scrollYPossible: false,\n        scrollXPossible: false,\n        trackYVisible: false,\n        trackXVisible: false,\n        zoomLevel: pageZoomLevel * 1,\n        isRTL: undefined\n      };\n      var props = _this.props;\n      scrollState.isRTL = _this.state.isRTL;\n      scrollState.scrollYBlocked = props.noScroll || props.noScrollY;\n      scrollState.scrollXBlocked = props.noScroll || props.noScrollX;\n\n      if (_this.scrollerElement) {\n        scrollState.clientHeight = _this.scrollerElement.clientHeight;\n        scrollState.clientWidth = _this.scrollerElement.clientWidth;\n        scrollState.scrollHeight = _this.scrollerElement.scrollHeight;\n        scrollState.scrollWidth = _this.scrollerElement.scrollWidth;\n        scrollState.scrollTop = _this.scrollerElement.scrollTop;\n        scrollState.scrollLeft = _this.scrollerElement.scrollLeft;\n        scrollState.scrollYPossible = !scrollState.scrollYBlocked && scrollState.scrollHeight > scrollState.clientHeight;\n        scrollState.scrollXPossible = !scrollState.scrollXBlocked && scrollState.scrollWidth > scrollState.clientWidth;\n        scrollState.trackYVisible = scrollState.scrollYPossible || props.permanentTracks || props.permanentTrackY;\n        scrollState.trackXVisible = scrollState.scrollXPossible || props.permanentTracks || props.permanentTrackX;\n      }\n\n      if (_this.contentElement) {\n        scrollState.contentScrollHeight = _this.contentElement.scrollHeight;\n        scrollState.contentScrollWidth = _this.contentElement.scrollWidth;\n      }\n\n      return scrollState;\n    };\n    /**\r\n     * @description Scroll to top border\r\n     */\n\n\n    _this.scrollToTop = function () {\n      if (_this.scrollerElement) {\n        _this.scrollerElement.scrollTop = 0;\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Scroll to left border\r\n     */\n\n\n    _this.scrollToLeft = function () {\n      if (_this.scrollerElement) {\n        _this.scrollerElement.scrollLeft = 0;\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Scroll to bottom border\r\n     */\n\n\n    _this.scrollToBottom = function () {\n      if (_this.scrollerElement) {\n        _this.scrollerElement.scrollTop = _this.scrollerElement.scrollHeight - _this.scrollerElement.clientHeight;\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Scroll to right border\r\n     */\n\n\n    _this.scrollToRight = function () {\n      if (_this.scrollerElement) {\n        _this.scrollerElement.scrollLeft = _this.scrollerElement.scrollWidth - _this.scrollerElement.clientWidth;\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Set the scrolls at given coordinates.<br/>\r\n     * If coordinate is undefined - current scroll value will persist.\r\n     */\n\n\n    _this.scrollTo = function (x, y) {\n      if (_this.scrollerElement) {\n        isNum(x) && (_this.scrollerElement.scrollLeft = x);\n        isNum(y) && (_this.scrollerElement.scrollTop = y);\n      }\n\n      return _this;\n    };\n    /**\r\n     * @description Center the viewport at given coordinates.<br/>\r\n     * If coordinate is undefined - current scroll value will persist.\r\n     */\n\n\n    _this.centerAt = function (x, y) {\n      if (_this.scrollerElement) {\n        isNum(x) && (_this.scrollerElement.scrollLeft = x - _this.scrollerElement.clientWidth / 2);\n        isNum(y) && (_this.scrollerElement.scrollTop = y - _this.scrollerElement.clientHeight / 2);\n      }\n\n      return _this;\n    };\n\n    _this.update = function (force) {\n      if (force === void 0) {\n        force = false;\n      }\n\n      if (!_this.scrollerElement) {\n        return;\n      } // autodetect direction if not defined\n\n\n      if (isUndef(_this.state.isRTL)) {\n        _this.setState({\n          isRTL: getComputedStyle(_this.scrollerElement).direction === \"rtl\"\n        });\n\n        return _this.getScrollState();\n      }\n\n      var scrollState = _this.getScrollState(true);\n\n      var prevScrollState = _assign({}, _this.scrollValues);\n\n      var props = _this.props;\n      var bitmask = 0;\n\n      if (!force) {\n        prevScrollState.clientHeight !== scrollState.clientHeight && (bitmask |= 1 << 0);\n        prevScrollState.clientWidth !== scrollState.clientWidth && (bitmask |= 1 << 1);\n        prevScrollState.scrollHeight !== scrollState.scrollHeight && (bitmask |= 1 << 2);\n        prevScrollState.scrollWidth !== scrollState.scrollWidth && (bitmask |= 1 << 3);\n        prevScrollState.scrollTop !== scrollState.scrollTop && (bitmask |= 1 << 4);\n        prevScrollState.scrollLeft !== scrollState.scrollLeft && (bitmask |= 1 << 5);\n        prevScrollState.scrollYBlocked !== scrollState.scrollYBlocked && (bitmask |= 1 << 6);\n        prevScrollState.scrollXBlocked !== scrollState.scrollXBlocked && (bitmask |= 1 << 7);\n        prevScrollState.scrollYPossible !== scrollState.scrollYPossible && (bitmask |= 1 << 8);\n        prevScrollState.scrollXPossible !== scrollState.scrollXPossible && (bitmask |= 1 << 9);\n        prevScrollState.trackYVisible !== scrollState.trackYVisible && (bitmask |= 1 << 10);\n        prevScrollState.trackXVisible !== scrollState.trackXVisible && (bitmask |= 1 << 11);\n        prevScrollState.isRTL !== scrollState.isRTL && (bitmask |= 1 << 12);\n        prevScrollState.contentScrollHeight !== scrollState.contentScrollHeight && (bitmask |= 1 << 13);\n        prevScrollState.contentScrollWidth !== scrollState.contentScrollWidth && (bitmask |= 1 << 14);\n        prevScrollState.zoomLevel !== scrollState.zoomLevel && (bitmask |= 1 << 15); // if not forced and nothing has changed - skip this update\n\n        if (bitmask === 0) {\n          return prevScrollState;\n        }\n      } else {\n        bitmask = 32767;\n      }\n\n      if (!props.native && _this.holderElement) {\n        if (bitmask & 1 << 13 && (props.translateContentSizesToHolder || props.translateContentSizeYToHolder)) {\n          _this.holderElement.style.height = scrollState.contentScrollHeight + \"px\";\n        }\n\n        if (bitmask & 1 << 14 && (props.translateContentSizesToHolder || props.translateContentSizeXToHolder)) {\n          _this.holderElement.style.width = scrollState.contentScrollWidth + \"px\";\n        }\n\n        if (props.translateContentSizesToHolder || props.translateContentSizeYToHolder || props.translateContentSizeXToHolder) {\n          if (!scrollState.clientHeight && scrollState.contentScrollHeight || !scrollState.clientWidth && scrollState.contentScrollWidth) {\n            return;\n          }\n        }\n      } // if scrollbars visibility has changed\n\n\n      if (bitmask & 1 << 10 || bitmask & 1 << 11) {\n        prevScrollState.scrollYBlocked = scrollState.scrollYBlocked;\n        prevScrollState.scrollXBlocked = scrollState.scrollXBlocked;\n        prevScrollState.scrollYPossible = scrollState.scrollYPossible;\n        prevScrollState.scrollXPossible = scrollState.scrollXPossible;\n\n        if (_this.trackYElement && bitmask & 1 << 10) {\n          _this.trackYElement.style.display = scrollState.trackYVisible ? null : \"none\";\n        }\n\n        if (_this.trackXElement && bitmask & 1 << 11) {\n          _this.trackXElement.style.display = scrollState.trackXVisible ? null : \"none\";\n        }\n\n        _this.scrollValues = prevScrollState;\n\n        _this.setState({\n          trackYVisible: _this.scrollValues.trackYVisible = scrollState.trackYVisible,\n          trackXVisible: _this.scrollValues.trackXVisible = scrollState.trackXVisible\n        });\n\n        return;\n      }\n\n      (props.native ? _this.updaterNative : _this.updaterCustom)(bitmask, scrollState);\n      _this.scrollValues = scrollState;\n\n      if (!props.native && bitmask & 1 << 15) {\n        getScrollbarWidth(true);\n\n        _this.forceUpdate();\n      }\n\n      _this.eventEmitter.emit(\"update\", _assign({}, scrollState), prevScrollState);\n\n      (bitmask & 1 << 4 || bitmask & 1 << 5) && _this.eventEmitter.emit(\"scroll\", _assign({}, scrollState), prevScrollState);\n      return _this.scrollValues;\n    };\n\n    _this.updaterNative = function () {\n      // just for future\n      return true;\n    };\n\n    _this.updaterCustom = function (bitmask, scrollValues) {\n      var props = _this.props;\n\n      if (_this.trackYElement) {\n        if (_this.thumbYElement && (bitmask & 1 << 0 || bitmask & 1 << 2 || bitmask & 1 << 4 || bitmask & 1 << 6 || bitmask & 1 << 8)) {\n          if (scrollValues.scrollYPossible) {\n            var trackInnerSize = getInnerHeight(_this.trackYElement);\n            var thumbSize = calcThumbSize(scrollValues.scrollHeight, scrollValues.clientHeight, trackInnerSize, props.minimalThumbYSize || props.minimalThumbSize, props.maximalThumbYSize || props.maximalThumbSize);\n            var thumbOffset = calcThumbOffset(scrollValues.scrollHeight, scrollValues.clientHeight, trackInnerSize, thumbSize, scrollValues.scrollTop);\n            _this.thumbYElement.style.transform = \"translateY(\" + thumbOffset + \"px)\";\n            _this.thumbYElement.style.height = thumbSize + \"px\";\n            _this.thumbYElement.style.display = \"\";\n          } else {\n            _this.thumbYElement.style.transform = \"\";\n            _this.thumbYElement.style.height = \"0px\";\n            _this.thumbYElement.style.display = \"none\";\n          }\n        }\n      }\n\n      if (_this.trackXElement) {\n        if (_this.thumbXElement && (bitmask & 1 << 1 || bitmask & 1 << 3 || bitmask & 1 << 5 || bitmask & 1 << 7 || bitmask & 1 << 9 || bitmask & 1 << 12)) {\n          if (scrollValues.scrollXPossible) {\n            var trackInnerSize = getInnerWidth(_this.trackXElement);\n            var thumbSize = calcThumbSize(scrollValues.scrollWidth, scrollValues.clientWidth, trackInnerSize, props.minimalThumbXSize || props.minimalThumbSize, props.maximalThumbXSize || props.maximalThumbSize);\n            var thumbOffset = calcThumbOffset(scrollValues.scrollWidth, scrollValues.clientWidth, trackInnerSize, thumbSize, scrollValues.scrollLeft);\n\n            if (_this.state.isRTL && shouldReverseRtlScroll()) {\n              thumbOffset += trackInnerSize - thumbSize;\n            }\n\n            _this.thumbXElement.style.transform = \"translateX(\" + thumbOffset + \"px)\";\n            _this.thumbXElement.style.width = thumbSize + \"px\";\n            _this.thumbXElement.style.display = \"\";\n          } else {\n            _this.thumbXElement.style.transform = \"\";\n            _this.thumbXElement.style.width = \"0px\";\n            _this.thumbXElement.style.display = \"none\";\n          }\n        }\n      }\n\n      return true;\n    };\n\n    _this.elementRefHolder = function (ref) {\n      _this.holderElement = ref;\n      isFun(_this.props.elementRef) && _this.props.elementRef(ref);\n    };\n\n    _this.elementRefWrapper = function (ref) {\n      _this.wrapperElement = ref;\n      isFun(_this.props.wrapperProps.elementRef) && _this.props.wrapperProps.elementRef(ref);\n    };\n\n    _this.elementRefScroller = function (ref) {\n      _this.scrollerElement = ref;\n      isFun(_this.props.scrollerProps.elementRef) && _this.props.scrollerProps.elementRef(ref);\n    };\n\n    _this.elementRefContent = function (ref) {\n      _this.contentElement = ref;\n      isFun(_this.props.contentProps.elementRef) && _this.props.contentProps.elementRef(ref);\n    };\n\n    _this.elementRefTrackX = function (ref) {\n      _this.trackXElement = ref;\n      isFun(_this.props.trackXProps.elementRef) && _this.props.trackXProps.elementRef(ref);\n    };\n\n    _this.elementRefTrackY = function (ref) {\n      _this.trackYElement = ref;\n      isFun(_this.props.trackYProps.elementRef) && _this.props.trackYProps.elementRef(ref);\n    };\n\n    _this.elementRefThumbX = function (ref) {\n      _this.thumbXElement = ref;\n      isFun(_this.props.thumbXProps.elementRef) && _this.props.thumbXProps.elementRef(ref);\n    };\n\n    _this.elementRefThumbY = function (ref) {\n      _this.thumbYElement = ref;\n      isFun(_this.props.thumbYProps.elementRef) && _this.props.thumbYProps.elementRef(ref);\n    };\n\n    _this.handleTrackXClick = function (ev, values) {\n      _this.props.trackXProps.onClick && _this.props.trackXProps.onClick(ev, values);\n\n      if (!_this.scrollerElement || !_this.trackXElement || !_this.thumbXElement || !_this.scrollValues || !_this.scrollValues.scrollXPossible) {\n        return;\n      }\n\n      _this._scrollDetection();\n\n      var thumbSize = _this.thumbXElement.clientWidth;\n      var trackInnerSize = getInnerWidth(_this.trackXElement);\n      var thumbOffset = (_this.scrollValues.isRTL && shouldReverseRtlScroll() ? values.offset + thumbSize / 2 - trackInnerSize : values.offset - thumbSize / 2) - ( //@ts-ignore\n      parseFloat(getComputedStyle(_this.trackXElement).paddingLeft) || 0);\n      var target = calcScrollForThumbOffset(_this.scrollValues.scrollWidth, _this.scrollValues.clientWidth, trackInnerSize, thumbSize, thumbOffset);\n\n      if (_this.props.trackClickBehavior === TRACK_CLICK_BEHAVIOR.STEP) {\n        target = (_this.scrollValues.isRTL ? _this.scrollValues.scrollLeft > target : _this.scrollValues.scrollLeft < target) ? _this.scrollValues.scrollLeft + _this.scrollValues.clientWidth : _this.scrollValues.scrollLeft - _this.scrollValues.clientWidth;\n      }\n\n      _this.scrollerElement.scrollLeft = target;\n    };\n\n    _this.handleTrackYClick = function (ev, values) {\n      _this.props.trackYProps.onClick && _this.props.trackYProps.onClick(ev, values);\n\n      if (!_this.scrollerElement || !_this.trackYElement || !_this.thumbYElement || !_this.scrollValues || !_this.scrollValues.scrollYPossible) {\n        return;\n      }\n\n      _this._scrollDetection();\n\n      var thumbSize = _this.thumbYElement.clientHeight;\n      var target = calcScrollForThumbOffset(_this.scrollValues.scrollHeight, _this.scrollValues.clientHeight, getInnerHeight(_this.trackYElement), thumbSize, values.offset - thumbSize / 2) - ( //@ts-ignore\n      parseFloat(getComputedStyle(_this.trackYElement).paddingTop) || 0);\n\n      if (_this.props.trackClickBehavior === TRACK_CLICK_BEHAVIOR.JUMP) {\n        _this.scrollerElement.scrollTop = target;\n      } else {\n        _this.scrollerElement.scrollTop = _this.scrollValues.scrollTop < target ? _this.scrollValues.scrollTop + _this.scrollValues.clientHeight : _this.scrollValues.scrollTop - _this.scrollValues.clientHeight;\n      }\n    };\n\n    _this.handleTrackYMouseWheel = function (ev) {\n      var props = _this.props;\n      props.trackYProps && props.trackYProps.onWheel && props.trackYProps.onWheel(ev);\n\n      if (props.disableTracksMousewheelScrolling || props.disableTrackYMousewheelScrolling) {\n        return;\n      }\n\n      _this._scrollDetection();\n\n      if (!_this.scrollerElement || _this.scrollValues.scrollYBlocked) {\n        return;\n      }\n\n      _this.scrollTop += ev.deltaY;\n    };\n\n    _this.handleTrackXMouseWheel = function (ev) {\n      var props = _this.props;\n      props.trackXProps && props.trackXProps.onWheel && props.trackXProps.onWheel(ev);\n\n      if (props.disableTracksMousewheelScrolling || props.disableTrackXMousewheelScrolling) {\n        return;\n      }\n\n      _this._scrollDetection();\n\n      if (!_this.scrollerElement || _this.scrollValues.scrollXBlocked) {\n        return;\n      }\n\n      _this.scrollLeft += ev.deltaX;\n    };\n\n    _this.handleThumbXDrag = function (data) {\n      if (!_this.trackXElement || !_this.thumbXElement || !_this.scrollerElement || !_this.scrollValues || !_this.scrollValues.scrollXPossible) {\n        return;\n      }\n\n      _this._scrollDetection();\n\n      var trackRect = _this.trackXElement.getBoundingClientRect();\n\n      var styles = getComputedStyle(_this.trackXElement); //@ts-ignore\n\n      var paddingLeft = parseFloat(styles.paddingLeft) || 0; //@ts-ignore\n\n      var paddingRight = parseFloat(styles.paddingRight) || 0;\n      var trackInnerSize = trackRect.width - paddingLeft - paddingRight;\n      var thumbSize = _this.thumbXElement.clientWidth;\n      var offset = _this.scrollValues.isRTL && shouldReverseRtlScroll() ? data.x + thumbSize - trackInnerSize + paddingLeft : data.lastX - paddingLeft;\n      _this.scrollerElement.scrollLeft = calcScrollForThumbOffset(_this.scrollValues.scrollWidth, _this.scrollValues.clientWidth, trackInnerSize, thumbSize, offset);\n    };\n\n    _this.handleThumbYDrag = function (data) {\n      if (!_this.scrollerElement || !_this.trackYElement || !_this.thumbYElement || !_this.scrollValues || !_this.scrollValues.scrollYPossible) {\n        return;\n      }\n\n      _this._scrollDetection();\n\n      var trackRect = _this.trackYElement.getBoundingClientRect();\n\n      var styles = getComputedStyle(_this.trackYElement); //@ts-ignore\n\n      var paddingTop = parseFloat(styles.paddingTop) || 0; //@ts-ignore\n\n      var paddingBottom = parseFloat(styles.paddingBottom) || 0;\n      var trackInnerSize = trackRect.height - paddingTop - paddingBottom;\n      var thumbSize = _this.thumbYElement.clientHeight;\n      var offset = data.y - paddingTop;\n      _this.scrollerElement.scrollTop = calcScrollForThumbOffset(_this.scrollValues.scrollHeight, _this.scrollValues.clientHeight, trackInnerSize, thumbSize, offset);\n    };\n\n    _this.handleScrollerScroll = function () {\n      _this._scrollDetection();\n    };\n\n    _this._scrollDetection = function () {\n      !_this._scrollDetectionTO && _this.eventEmitter.emit(\"scrollStart\", _this.getScrollState());\n      _this._scrollDetectionTO && global.window && global.window.clearTimeout(_this._scrollDetectionTO);\n      _this._scrollDetectionTO = global.window ? global.window.setTimeout(_this._scrollDetectionCallback, _this.props.scrollDetectionThreshold || 0) : null;\n    };\n\n    _this._scrollDetectionCallback = function () {\n      _this._scrollDetectionTO = null;\n\n      _this.eventEmitter.emit(\"scrollStop\", _this.getScrollState());\n    };\n\n    _this.state = {\n      trackXVisible: false,\n      trackYVisible: false,\n      isRTL: props.rtl\n    };\n    _this.scrollValues = _this.getScrollState(true);\n    _this.eventEmitter = new Emittr(15);\n    props.onUpdate && _this.eventEmitter.on(\"update\", props.onUpdate);\n    props.onScroll && _this.eventEmitter.on(\"scroll\", props.onScroll);\n    props.onScrollStart && _this.eventEmitter.on(\"scrollStart\", props.onScrollStart);\n    props.onScrollStop && _this.eventEmitter.on(\"scrollStop\", props.onScrollStop);\n    _this.id = uuid();\n    return _this;\n  }\n\n  Object.defineProperty(Scrollbar.prototype, \"scrollTop\", {\n    get: function get() {\n      if (this.scrollerElement) {\n        return this.scrollerElement.scrollTop;\n      }\n\n      return 0;\n    },\n    set: function set(top) {\n      if (this.scrollerElement) {\n        this.scrollerElement.scrollTop = top;\n        this.update();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"scrollLeft\", {\n    get: function get() {\n      if (this.scrollerElement) {\n        return this.scrollerElement.scrollLeft;\n      }\n\n      return 0;\n    },\n    set: function set(left) {\n      if (this.scrollerElement) {\n        this.scrollerElement.scrollLeft = left;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"scrollHeight\", {\n    get: function get() {\n      if (this.scrollerElement) {\n        return this.scrollerElement.scrollHeight;\n      }\n\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"scrollWidth\", {\n    get: function get() {\n      if (this.scrollerElement) {\n        return this.scrollerElement.scrollWidth;\n      }\n\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"clientHeight\", {\n    get: function get() {\n      if (this.scrollerElement) {\n        return this.scrollerElement.clientHeight;\n      }\n\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"clientWidth\", {\n    get: function get() {\n      if (this.scrollerElement) {\n        return this.scrollerElement.clientWidth;\n      }\n\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Scrollbar.calculateStyles = function (props, state, scrollValues, scrollbarWidth) {\n    var _a, _b, _c, _d;\n\n    var useDefaultStyles = !props.noDefaultStyles;\n    return {\n      holder: _assign(_assign(_assign({}, useDefaultStyles && style.holder), {\n        position: \"relative\"\n      }), props.style),\n      wrapper: _assign(_assign(_assign({}, useDefaultStyles && _assign(_assign(_assign({}, style.wrapper), !props.disableTracksWidthCompensation && !props.disableTrackYWidthCompensation && (_a = {}, _a[state.isRTL ? \"left\" : \"right\"] = state.trackYVisible ? 10 : 0, _a)), !props.disableTracksWidthCompensation && !props.disableTrackXWidthCompensation && {\n        bottom: state.trackXVisible ? 10 : 0\n      })), props.wrapperProps.style), {\n        position: \"absolute\",\n        overflow: \"hidden\"\n      }),\n      content: _assign(_assign(_assign(_assign(_assign({}, useDefaultStyles && style.content), props.translateContentSizesToHolder || props.translateContentSizeYToHolder || props.translateContentSizeXToHolder ? {\n        display: \"table-cell\"\n      } : {\n        padding: 0.05 // needed to disable margin collapsing without flexboxes, other possible solutions here: https://stackoverflow.com/questions/19718634/how-to-disable-margin-collapsing\n\n      }), useDefaultStyles && !(props.translateContentSizesToHolder || props.translateContentSizeYToHolder) && {\n        minHeight: \"100%\"\n      }), useDefaultStyles && !(props.translateContentSizesToHolder || props.translateContentSizeXToHolder) && {\n        minWidth: \"100%\"\n      }), props.contentProps.style),\n      scroller: _assign(_assign(_assign(_assign((_b = {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        paddingBottom: !scrollbarWidth && scrollValues.scrollXPossible ? props.fallbackScrollbarWidth : undefined\n      }, _b[state.isRTL ? \"paddingLeft\" : \"paddingRight\"] = !scrollbarWidth && scrollValues.scrollYPossible ? props.fallbackScrollbarWidth : undefined, _b), props.scrollerProps.style), !isUndef(props.rtl) && {\n        direction: props.rtl ? \"rtl\" : \"ltr\"\n      }), props.momentum && {\n        WebkitOverflowScrolling: \"touch\"\n      }), (_c = {\n        overflowY: scrollValues.scrollYPossible ? \"scroll\" : \"hidden\",\n        overflowX: scrollValues.scrollXPossible ? \"scroll\" : \"hidden\",\n        marginBottom: scrollValues.scrollXPossible ? -(scrollbarWidth || props.fallbackScrollbarWidth) - Number(scrollValues.zoomLevel !== 1) : undefined\n      }, _c[state.isRTL ? \"marginLeft\" : \"marginRight\"] = scrollValues.scrollYPossible ? -(scrollbarWidth || props.fallbackScrollbarWidth) - Number(scrollValues.zoomLevel !== 1) : undefined, _c)),\n      trackX: _assign(_assign(_assign(_assign({}, useDefaultStyles && style.track.common), useDefaultStyles && style.track.x), props.trackXProps.style), !state.trackXVisible && {\n        display: \"none\"\n      }),\n      trackY: _assign(_assign(_assign(_assign(_assign({}, useDefaultStyles && style.track.common), useDefaultStyles && style.track.y), useDefaultStyles && (_d = {}, _d[state.isRTL ? \"left\" : \"right\"] = 0, _d)), props.trackYProps.style), !state.trackYVisible && {\n        display: \"none\"\n      }),\n      thumbX: _assign(_assign(_assign({}, useDefaultStyles && style.thumb.common), useDefaultStyles && style.thumb.x), props.thumbXProps.style),\n      thumbY: _assign(_assign(_assign({}, useDefaultStyles && style.thumb.common), useDefaultStyles && style.thumb.y), props.thumbYProps.style)\n    };\n  };\n\n  Scrollbar.prototype.componentDidMount = function () {\n    if (!this.scrollerElement) {\n      this.setState(function () {\n        throw new Error(\"scroller element was not created. Possibly you haven't provided HTMLDivElement to renderer's `elementRef` function.\");\n      });\n      return;\n    }\n\n    if (!this.contentElement) {\n      this.setState(function () {\n        throw new Error(\"content element was not created. Possibly you haven't provided HTMLDivElement to renderer's `elementRef` function.\");\n      });\n      return;\n    }\n\n    var props = this.props;\n\n    if (!props.native && !props.mobileNative) {\n      //ToDo: move native state to the state so it can be synchronized\n      if (!this.holderElement) {\n        this.setState(function () {\n          throw new Error(\"holder element was not created. Possibly you haven't provided HTMLDivElement to renderer's `elementRef` function.\");\n        });\n        return;\n      }\n\n      if (!this.wrapperElement) {\n        this.setState(function () {\n          throw new Error(\"wrapper element was not created. Possibly you haven't provided HTMLDivElement to renderer's `elementRef` function.\");\n        });\n        return;\n      }\n    }\n\n    Loop.addTarget(this);\n\n    if (!isUndef(props.scrollTop)) {\n      this.scrollerElement.scrollTop = props.scrollTop;\n    }\n\n    if (!isUndef(props.scrollLeft)) {\n      this.scrollerElement.scrollLeft = props.scrollLeft;\n    }\n\n    this.update(true);\n  };\n\n  Scrollbar.prototype.componentWillUnmount = function () {\n    Loop.removeTarget(this);\n  };\n\n  Scrollbar.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (!this.scrollerElement) {\n      return;\n    }\n\n    var props = this.props;\n\n    if (props.rtl !== prevProps.rtl && props.rtl !== this.state.isRTL) {\n      this.setState({\n        isRTL: props.rtl\n      });\n    }\n\n    if (this.state.isRTL !== prevState.isRTL) {\n      this.update();\n    }\n\n    if (!isUndef(props.scrollTop) && props.scrollTop !== this.scrollerElement.scrollTop) {\n      this.scrollerElement.scrollTop = props.scrollTop;\n    }\n\n    if (!isUndef(props.scrollLeft) && props.scrollLeft !== this.scrollerElement.scrollLeft) {\n      this.scrollerElement.scrollLeft = props.scrollLeft;\n    }\n\n    if (prevProps.onUpdate !== props.onUpdate) {\n      prevProps.onUpdate && this.eventEmitter.off(\"update\", prevProps.onUpdate);\n      props.onUpdate && this.eventEmitter.on(\"update\", props.onUpdate);\n    }\n\n    if (prevProps.onScroll !== props.onScroll) {\n      prevProps.onScroll && this.eventEmitter.off(\"scroll\", prevProps.onScroll);\n      props.onScroll && this.eventEmitter.on(\"scroll\", props.onScroll);\n    }\n\n    if (prevProps.onScrollStart !== props.onScrollStart) {\n      prevProps.onScrollStart && this.eventEmitter.off(\"scrollStart\", prevProps.onScrollStart);\n      props.onScrollStart && this.eventEmitter.on(\"scrollStart\", props.onScrollStart);\n    }\n\n    if (prevProps.onScrollStop !== props.onScrollStop) {\n      prevProps.onScrollStop && this.eventEmitter.off(\"scrollStop\", prevProps.onScrollStop);\n      props.onScrollStop && this.eventEmitter.on(\"scrollStop\", props.onScrollStop);\n    }\n  };\n\n  Scrollbar.prototype.render = function () {\n    var _a = this.props,\n        createContext = _a.createContext,\n        rtl = _a.rtl,\n        _native = _a.native,\n        mobileNative = _a.mobileNative,\n        momentum = _a.momentum,\n        noDefaultStyles = _a.noDefaultStyles,\n        disableTracksMousewheelScrolling = _a.disableTracksMousewheelScrolling,\n        disableTrackXMousewheelScrolling = _a.disableTrackXMousewheelScrolling,\n        disableTrackYMousewheelScrolling = _a.disableTrackYMousewheelScrolling,\n        disableTracksWidthCompensation = _a.disableTracksWidthCompensation,\n        disableTrackXWidthCompensation = _a.disableTrackXWidthCompensation,\n        disableTrackYWidthCompensation = _a.disableTrackYWidthCompensation,\n        noScrollX = _a.noScrollX,\n        noScrollY = _a.noScrollY,\n        noScroll = _a.noScroll,\n        permanentTrackX = _a.permanentTrackX,\n        permanentTrackY = _a.permanentTrackY,\n        permanentTracks = _a.permanentTracks,\n        removeTracksWhenNotUsed = _a.removeTracksWhenNotUsed,\n        removeTrackYWhenNotUsed = _a.removeTrackYWhenNotUsed,\n        removeTrackXWhenNotUsed = _a.removeTrackXWhenNotUsed,\n        minimalThumbSize = _a.minimalThumbSize,\n        maximalThumbSize = _a.maximalThumbSize,\n        minimalThumbXSize = _a.minimalThumbXSize,\n        maximalThumbXSize = _a.maximalThumbXSize,\n        minimalThumbYSize = _a.minimalThumbYSize,\n        maximalThumbYSize = _a.maximalThumbYSize,\n        fallbackScrollbarWidth = _a.fallbackScrollbarWidth,\n        scrollTop = _a.scrollTop,\n        scrollLeft = _a.scrollLeft,\n        trackClickBehavior = _a.trackClickBehavior,\n        scrollDetectionThreshold = _a.scrollDetectionThreshold,\n        propsWrapperProps = _a.wrapperProps,\n        propsScrollerProps = _a.scrollerProps,\n        propsContentProps = _a.contentProps,\n        propsTrackXProps = _a.trackXProps,\n        propsTrackYProps = _a.trackYProps,\n        propsThumbXProps = _a.thumbXProps,\n        propsThumbYProps = _a.thumbYProps,\n        propsScrollbarWidth = _a.scrollbarWidth,\n        elementRef = _a.elementRef,\n        onUpdate = _a.onUpdate,\n        onScroll = _a.onScroll,\n        onScrollStart = _a.onScrollStart,\n        onScrollStop = _a.onScrollStop,\n        translateContentSizesToHolder = _a.translateContentSizesToHolder,\n        translateContentSizeYToHolder = _a.translateContentSizeYToHolder,\n        translateContentSizeXToHolder = _a.translateContentSizeXToHolder,\n        children = _a.children,\n        propsHolderProps = __rest(_a, [\"createContext\", \"rtl\", \"native\", \"mobileNative\", \"momentum\", \"noDefaultStyles\", \"disableTracksMousewheelScrolling\", \"disableTrackXMousewheelScrolling\", \"disableTrackYMousewheelScrolling\", \"disableTracksWidthCompensation\", \"disableTrackXWidthCompensation\", \"disableTrackYWidthCompensation\", \"noScrollX\", \"noScrollY\", \"noScroll\", \"permanentTrackX\", \"permanentTrackY\", \"permanentTracks\", \"removeTracksWhenNotUsed\", \"removeTrackYWhenNotUsed\", \"removeTrackXWhenNotUsed\", \"minimalThumbSize\", \"maximalThumbSize\", \"minimalThumbXSize\", \"maximalThumbXSize\", \"minimalThumbYSize\", \"maximalThumbYSize\", \"fallbackScrollbarWidth\", \"scrollTop\", \"scrollLeft\", \"trackClickBehavior\", \"scrollDetectionThreshold\", \"wrapperProps\", \"scrollerProps\", \"contentProps\", \"trackXProps\", \"trackYProps\", \"thumbXProps\", \"thumbYProps\", \"scrollbarWidth\", \"elementRef\", \"onUpdate\", \"onScroll\", \"onScrollStart\", \"onScrollStop\", \"translateContentSizesToHolder\", \"translateContentSizeYToHolder\", \"translateContentSizeXToHolder\", \"children\"]);\n\n    var scrollbarWidth = !isUndef(propsScrollbarWidth) ? propsScrollbarWidth : getScrollbarWidth() || 0;\n\n    if (_native || !scrollbarWidth && mobileNative) {\n      this.elementRefHolder(null);\n      this.elementRefWrapper(null);\n      this.elementRefTrackX(null);\n      this.elementRefTrackY(null);\n      this.elementRefThumbX(null);\n      this.elementRefThumbY(null);\n\n      var contentProps_1 = _assign(_assign({}, propsContentProps), {\n        key: \"ScrollbarsCustom-Content\",\n        className: cnb(\"ScrollbarsCustom-Content\", propsContentProps.className),\n        children: children\n      });\n\n      var scrollerProps_1 = _assign(_assign({}, propsHolderProps), {\n        className: cnb(\"ScrollbarsCustom native\", this.state.trackYVisible && \"trackYVisible\", this.state.trackXVisible && \"trackXVisible\", this.state.isRTL && \"rtl\", propsHolderProps.className),\n        style: _assign(_assign(_assign(_assign({}, propsHolderProps.style), !isUndef(rtl) && {\n          direction: rtl ? \"rtl\" : \"ltr\"\n        }), momentum && {\n          WebkitOverflowScrolling: \"touch\"\n        }), {\n          overflowX: noScroll || noScrollX ? \"hidden\" : permanentTracks || permanentTrackX ? \"scroll\" : \"auto\",\n          overflowY: noScroll || noScrollY ? \"hidden\" : permanentTracks || permanentTrackY ? \"scroll\" : \"auto\"\n        }),\n        onScroll: this.handleScrollerScroll,\n        children: renderDivWithRenderer(contentProps_1, this.elementRefContent),\n        renderer: propsScrollerProps.renderer,\n        elementRef: propsScrollerProps.elementRef\n      });\n\n      return renderDivWithRenderer(scrollerProps_1, this.elementRefScroller);\n    }\n\n    var styles = Scrollbar.calculateStyles(this.props, this.state, this.scrollValues, scrollbarWidth);\n    var holderChildren = [];\n\n    var contentProps = _assign(_assign({}, propsContentProps), {\n      key: \"ScrollbarsCustom-Content\",\n      className: cnb(\"ScrollbarsCustom-Content\", propsContentProps.className),\n      style: styles.content,\n      children: createContext ? createElement(ScrollbarContext.Provider, {\n        value: {\n          parentScrollbar: this\n        },\n        children: children\n      }) : children\n    });\n\n    var scrollerProps = _assign(_assign({}, propsScrollerProps), {\n      key: \"ScrollbarsCustom-Scroller\",\n      className: cnb(\"ScrollbarsCustom-Scroller\", propsScrollerProps.className),\n      style: styles.scroller,\n      children: renderDivWithRenderer(contentProps, this.elementRefContent),\n      onScroll: this.handleScrollerScroll\n    });\n\n    var wrapperProps = _assign(_assign({}, propsWrapperProps), {\n      key: \"ScrollbarsCustom-Wrapper\",\n      className: cnb(\"ScrollbarsCustom-Wrapper\", propsWrapperProps.className),\n      style: styles.wrapper,\n      children: renderDivWithRenderer(scrollerProps, this.elementRefScroller)\n    });\n\n    holderChildren.push(renderDivWithRenderer(wrapperProps, this.elementRefWrapper));\n\n    if (this.state.trackYVisible || !removeTracksWhenNotUsed && !removeTrackYWhenNotUsed) {\n      var thumbYProps = _assign(_assign({}, propsThumbYProps), {\n        key: \"ScrollbarsCustom-ThumbY\",\n        style: styles.thumbY,\n        elementRef: this.elementRefThumbY,\n        onDrag: this.handleThumbYDrag,\n        onDragEnd: this.handleThumbYDrag,\n        axis: AXIS_DIRECTION.Y\n      });\n\n      var trackYProps = _assign(_assign(_assign(_assign({}, propsTrackYProps), {\n        key: \"ScrollbarsCustom-TrackY\",\n        style: styles.trackY,\n        elementRef: this.elementRefTrackY,\n        onClick: this.handleTrackYClick\n      }), (disableTracksMousewheelScrolling || disableTrackYMousewheelScrolling) && {\n        onWheel: this.handleTrackYMouseWheel\n      }), {\n        axis: AXIS_DIRECTION.Y\n      });\n\n      trackYProps.children = createElement(ScrollbarThumb, _assign({}, thumbYProps));\n      holderChildren.push(createElement(ScrollbarTrack, _assign({}, trackYProps)));\n    } else {\n      this.elementRefTrackY(null);\n      this.elementRefThumbY(null);\n    }\n\n    if (this.state.trackXVisible || !removeTracksWhenNotUsed && !removeTrackXWhenNotUsed) {\n      var thumbXProps = _assign(_assign({}, propsThumbXProps), {\n        key: \"ScrollbarsCustom-ThumbX\",\n        style: styles.thumbX,\n        elementRef: this.elementRefThumbX,\n        onDrag: this.handleThumbXDrag,\n        onDragEnd: this.handleThumbXDrag,\n        axis: AXIS_DIRECTION.X\n      });\n\n      var trackXProps = _assign(_assign(_assign(_assign({}, propsTrackXProps), {\n        key: \"ScrollbarsCustom-TrackX\",\n        style: styles.trackX,\n        elementRef: this.elementRefTrackX,\n        onClick: this.handleTrackXClick\n      }), (disableTracksMousewheelScrolling || disableTrackXMousewheelScrolling) && {\n        onWheel: this.handleTrackXMouseWheel\n      }), {\n        axis: AXIS_DIRECTION.X\n      });\n\n      trackXProps.children = createElement(ScrollbarThumb, _assign({}, thumbXProps));\n      holderChildren.push(createElement(ScrollbarTrack, _assign({}, trackXProps)));\n    } else {\n      this.elementRefTrackX(null);\n      this.elementRefThumbX(null);\n    }\n\n    var holderProps = _assign(_assign({}, propsHolderProps), {\n      className: cnb(\"ScrollbarsCustom\", this.state.trackYVisible && \"trackYVisible\", this.state.trackXVisible && \"trackXVisible\", this.state.isRTL && \"rtl\", propsHolderProps.className),\n      style: styles.holder,\n      children: holderChildren\n    });\n\n    return renderDivWithRenderer(holderProps, this.elementRefHolder);\n  };\n\n  Scrollbar.contextType = ScrollbarContext;\n  Scrollbar.propTypes = {\n    createContext: bool,\n    rtl: bool,\n    native: bool,\n    mobileNative: bool,\n    momentum: bool,\n    noDefaultStyles: bool,\n    disableTracksMousewheelScrolling: bool,\n    disableTrackXMousewheelScrolling: bool,\n    disableTrackYMousewheelScrolling: bool,\n    disableTracksWidthCompensation: bool,\n    disableTrackXWidthCompensation: bool,\n    disableTrackYWidthCompensation: bool,\n    minimalThumbSize: number,\n    maximalThumbSize: number,\n    minimalThumbXSize: number,\n    maximalThumbXSize: number,\n    minimalThumbYSize: number,\n    maximalThumbYSize: number,\n    noScrollX: bool,\n    noScrollY: bool,\n    noScroll: bool,\n    permanentTrackX: bool,\n    permanentTrackY: bool,\n    permanentTracks: bool,\n    translateContentSizesToHolder: bool,\n    translateContentSizeYToHolder: bool,\n    translateContentSizeXToHolder: bool,\n    removeTracksWhenNotUsed: bool,\n    removeTrackYWhenNotUsed: bool,\n    removeTrackXWhenNotUsed: bool,\n    trackClickBehavior: TRACK_CLICK_BEHAVIOR_PROP_TYPE,\n    scrollbarWidth: number,\n    fallbackScrollbarWidth: number,\n    scrollDetectionThreshold: number,\n    scrollTop: number,\n    scrollLeft: number,\n    className: string,\n    wrapperProps: object,\n    contentProps: object,\n    trackXProps: object,\n    trackYProps: object,\n    thumbXProps: object,\n    thumbYProps: object,\n    onUpdate: func,\n    onScroll: func,\n    onScrollStart: func,\n    onScrollStop: func\n  };\n  Scrollbar.defaultProps = {\n    momentum: true,\n    minimalThumbSize: 30,\n    fallbackScrollbarWidth: 20,\n    trackClickBehavior: TRACK_CLICK_BEHAVIOR.JUMP,\n    scrollDetectionThreshold: 100,\n    wrapperProps: {},\n    scrollerProps: {},\n    contentProps: {},\n    trackXProps: {},\n    trackYProps: {},\n    thumbXProps: {},\n    thumbYProps: {}\n  };\n  return Scrollbar;\n}(Component);\n\nexport default Scrollbar;\nexport { Scrollbar, ScrollbarContext };","map":null,"metadata":{},"sourceType":"module"}