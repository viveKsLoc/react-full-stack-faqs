{"ast":null,"code":"var zoomLevelDetector = function zoomLevelDetector(matchMedia, currentLevel, minimalLevel, stepDivisor) {\n  while (currentLevel >= minimalLevel && !matchMedia(\"(min-resolution: \" + currentLevel / stepDivisor + \"dppx)\").matches) {\n    currentLevel--;\n  }\n\n  return currentLevel;\n};\n\nvar calculatePageZoomLevel = function calculatePageZoomLevel(win) {\n  var mm = win.matchMedia;\n  var startLevel = 10;\n  var minLevel = 0.1;\n  var stepDivisor = 1;\n  var level;\n\n  for (var i = 0; i < 4; i++) {\n    level = 10 * zoomLevelDetector(mm, startLevel, minLevel, stepDivisor);\n    startLevel = level + 9;\n    minLevel = level;\n    stepDivisor *= 10;\n  }\n\n  return level / stepDivisor;\n};\n\nfunction zoomLevel(win) {\n  win = win || global.window;\n\n  if (!win) {\n    return 1;\n  }\n\n  if (typeof win.devicePixelRatio !== \"undefined\") {\n    return win.devicePixelRatio;\n  }\n\n  var frames = win.document.frames;\n\n  if (typeof frames !== \"undefined\") {\n    if (typeof frames.devicePixelRatio !== \"undefined\") {\n      return frames.devicePixelRatio;\n    }\n\n    return frames.screen.deviceXDPI / frames.screen.systemXDPI;\n  }\n\n  if (typeof win.matchMedia !== \"undefined\") {\n    return calculatePageZoomLevel(win);\n  }\n\n  return 1;\n}\n\nfunction elementZoomLevel(element, elementStyles, win) {\n  elementStyles = elementStyles || getComputedStyle(element); // @ts-ignore\n\n  return zoomLevel(win) * (parseFloat(elementStyles.zoom) || 1);\n}\n\nexport default zoomLevel;\nexport { elementZoomLevel, zoomLevel };","map":null,"metadata":{},"sourceType":"module"}